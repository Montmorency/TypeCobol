000000*£TC-PART1£PART2-000003£PART3-000154£PART4-000182£££££££££££££££££
000000* DO NOT EDIT THIS FILE. AUTOMATICALLY GENERATED
000000*£TC-PART2££££££££££££££££££££££££££££££££££££££££££££££££££££££££
      *TypeCobol_Version:0.1(alpha)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. PGM1.
       DATA DIVISION.
       Working-STORAGE SECTION.
       01 TC-STACKED pic X(08) value 'STACKED'.
       01 TC-Call          PIC X VALUE 'T'.
           88 TC-FirstCall  VALUE 'T'.
           88 TC-NthCall    VALUE 'F'
                            X'00' thru 'S'
                            'U' thru X'FF'.

                               
       01  myname1      PIC X(15).
       LINKAGE SECTION.
      *Common to all librairies used by the program.
       01 TC-Library-PntTab.
          05 TC-Library-PntNbr          PIC S9(04) COMP.
          05 TC-Library-Item OCCURS 1000
                               DEPENDING ON TC-Library-PntNbr
                               INDEXED   BY TC-Library-Idx.
              10 TC-Library-Item-Idt      PIC X(08).
              10 TC-Library-Item-Pnt      PROCEDURE-POINTER.

      *To call program b38d2b5e in module STACKED
      *Which is generated code for STACKED.Foo
      *Declared in source file CallPublicProcInStackedPgm.rdz.tcbl
       01 TC-STACKED-b38d2b5e-Item.
          05 TC-STACKED-b38d2b5e-Idt PIC X(08).
          05 TC-STACKED-b38d2b5e PROCEDURE-POINTER.

      
       PROCEDURE DIVISiON.
       INIT-LIBRARY.
      *
           PERFORM TC-INITIALIZATIONS

                    
           EXIT.
      
       TRAITEMENT.
      *OK  call STACKED::Foo input myname1
      *    call STACKED::Foo input myname1
           
           IF ADDRESS OF TC-STACKED-b38d2b5e-Item = NULL
             OR TC-STACKED-b38d2b5e-Idt not = 'b38d2b5e'
               PERFORM TC-LOAD-POINTERS-STACKED
           END-IF
      *    Equivalent to call b38d2b5e in module STACKED
           CALL TC-STACKED-b38d2b5e USING
                                 myname1
           end-call
                                          
           .
      *=================================================================
       TC-INITIALIZATIONS.
      *=================================================================
            IF TC-FirstCall
                 SET TC-NthCall TO TRUE
                 SET ADDRESS OF TC-STACKED-b38d2b5e-Item  TO NULL
            END-IF
            .
      *=================================================================
        TC-LOAD-POINTERS-STACKED.
      *=================================================================
            CALL 'ZCALLPGM' USING TC-STACKED
            ADDRESS OF TC-Library-PntTab
            PERFORM VARYING TC-Library-Idx FROM 1 BY 1
            UNTIL TC-Library-Idx > TC-Library-PntNbr
                EVALUATE TC-Library-Item-Idt (TC-Library-Idx)
                WHEN 'b38d2b5e'
                     SET ADDRESS OF
                     TC-STACKED-b38d2b5e-Item
                     TO ADDRESS OF
                     TC-Library-Item(TC-Library-Idx)
                WHEN OTHER
                     CONTINUE
                END-EVALUATE
            END-PERFORM
            .

      
       END PROGRAM PGM1.
      
       IDENTIFICATION DIVISION.
       PROGRAM-ID. STACKED.
       DATA DIVISION.
                                                            
       WORKING-STORAGE SECTION.
       01  TC-STACKED-FctList-Loaded PIC X(02).
           88 TC-STACKED-FctList-IsLoaded      VALUE 'OK'.
       01 TC-STACKED-PntTab.
           05 TC-STACKED-PntNbr         PIC S9(04) COMP VALUE 1.
      *To call program b38d2b5e
      *Which is generated code for STACKED.Foo
      *Declared in source file CallPublicProcInStackedPgm.rdz.tcbl
           05 TC-STACKED-b38d2b5e-Idt   PIC X(08) VALUE 'b38d2b5e'.
           05 TC-STACKED-b38d2b5e PROCEDURE-POINTER.

       
       LINKAGE SECTION.
       01 PntTab-Pnt POINTER.

       PROCEDURE DIVISION USING PntTab-Pnt.
                          
      *
      *    IF CallIsCopy
      *      PERFORM Copy-Process-Mode
      *    ELSE
           PERFORM FctList-Process-Mode
           perform INIT-LIBRARY
      *    END-IF

           GOBACK.

        FctList-Process-Mode.
            IF NOT TC-STACKED-FctList-IsLoaded
              SET TC-STACKED-b38d2b5e   TO ENTRY 'b38d2b5e'

              SET TC-STACKED-FctList-IsLoaded TO TRUE
            END-IF
               .

            set PntTab-Pnt TO ADDRESS OF TC-STACKED-PntTab

           .
                          
      *declare procedure Foo public
      *    input myname pic x(15).
      
       END PROGRAM STACKED.
      *
      *declare procedure Foo public
      *    input myname pic x(15).
      *_________________________________________________________________
       IDENTIFICATION DIVISION.
       PROGRAM-ID. b38d2b5e.
       DATA DIVISION.
       LINKAGE SECTION.
      *PGM1.Foo - Params :
      *     input(myname: pic x(15))
       01 myname pic x(15).
       PROCEDURE DIVISION
             USING BY REFERENCE myname
           .
      *PGM1.Foo - Params :
      *     input(myname: pic x(15))
           goback.
       END PROGRAM b38d2b5e.

000000*£TC-PART3££££££££££££££££££££££££££££££££££££££££££££££££££££££££
000000*IDENTIFICATION DIVISION.
000000*PROGRAM-ID. PGM1.
000000*DATA DIVISION.
000000*Working-STORAGE SECTION.
000000*01  myname1      PIC X(15).
000000*
000000*PROCEDURE DIVISiON.
000000*INIT-LIBRARY.
000000*    EXIT.
000000*
000000*TRAITEMENT.
000000*OK  call STACKED::Foo input myname1
000000*    call STACKED::Foo input myname1
000000*    .
000000*
000000*END PROGRAM PGM1.
000000*
000000*IDENTIFICATION DIVISION.
000000*PROGRAM-ID. STACKED.
000000*PROCEDURE DIVISION.
000000*declare procedure Foo public
000000*    input myname pic x(15).
000000*procedure division.
000000*    goback.
000000*end-declare.
000000*
000000*END PROGRAM STACKED.
000000*£TC-PART4££££££££££££££££££££££££££££££££££££££££££££££££££££££££
000000*           *               
