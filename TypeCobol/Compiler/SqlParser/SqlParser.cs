
//----------------------------------------------------
// The following code was generated by C# CUP v0.1
//----------------------------------------------------

namespace TypeCobol.Compiler.SqlParser
 {

using TypeCobol.Compiler.SqlScanner;
using TypeCobol.Compiler.CupParser;
using TypeCobol.Compiler.CupParser.NodeBuilder;
using TypeCobol.Compiler.CodeElements;
using System.Collections.Generic;
using System.Collections;
using System;
using TUVienna.CS_CUP.Runtime;

/** C# CUP v0.1 generated parser.
  */
public class SqlParser : TUVienna.CS_CUP.Runtime.lr_parser {

  /** Default constructor. */
  public SqlParser():base() {;}

  /** Constructor which sets the default scanner. */
  public SqlParser(TUVienna.CS_CUP.Runtime.Scanner s): base(s) {;}

  /** Production table. */
  protected static readonly short[][] _production_table = 
new short[4][] {
	new short[2]{0,2},
	new short[2]{1,1},
	new short[2]{1,1},
	new short[2]{2,2}
};

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static readonly short[][] _action_table = 
new short[7][] {
	new short[4]{181,3,-1,0},
	new short[4]{0,7,-1,0},
	new short[6]{42,4,221,5,-1,0},
	new short[4]{0,-3,-1,0},
	new short[4]{0,-2,-1,0},
	new short[4]{0,-4,-1,0},
	new short[4]{0,-1,-1,0}
};

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static readonly short[][] _reduce_table = 
new short[7][] {
	new short[4]{2,1,-1,-1},
	new short[2]{-1,-1},
	new short[4]{1,5,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1}
};

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_SqlParser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_SqlParser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override TUVienna.CS_CUP.Runtime.Symbol do_action(
    int                        act_num,
    TUVienna.CS_CUP.Runtime.lr_parser parser,
    System.Collections.Stack            xstack1,
    int                        top)
  {
  mStack CUP_parser_stack= new mStack(xstack1);
    /* call code in generated class */
    return action_obj.CUP_SqlParser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}



	// The Program Class Builder instance.
	public IProgramClassBuilder Builder
	{
		get;
		set;
	}
	// The Error Reporter instance
	public CupCommon.ICupParserErrorReporter ErrorReporter
	{
		get;
		set;
	}

	// Test wheither or not this parser is a trial parser
	public bool IsTrial
	{
		get;
		set;
	}

  // get the current state of the parser.
  public int getParserState() 
  {
	return ((Symbol)stack.Peek()).parse_state;	
  }

  //get the parser stack.
  public Stack getParserStack() 
  {
	return stack;	
  }

    public override void report_fatal_error(
    string   message, 
    object   info)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.ReportFatalError(this, getParserStack(), message, info))
			{
				return;
			}
		}
		base.report_fatal_error(message, info);
	}

	public override void report_error(string message, object info)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.ReportError(this, getParserStack(), message, info))
			{
				return;
			}
		}
		base.report_error(message, info);
	}

	public override void syntax_error(Symbol cur_token)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.SyntaxError(this, getParserStack(), cur_token))
			{
				return;
			}
		}
		base.syntax_error(cur_token);
	}

	public override void unrecovered_syntax_error(Symbol cur_token)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.UnrecoveredSyntaxError(this, getParserStack(), cur_token))
			{
				return;
			}
		}
		base.unrecovered_syntax_error(cur_token);
	}

	public void ReportScannerDirectiveError()
	{
		ErrorReporter.SyntaxError(this, getParserStack(), ((SqlTokenizer)getScanner()).LastStopSymbol);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_SqlParser_actions {


	//Current program identification
	TypeCobol.Compiler.CodeElements.ProgramIdentification programIdentification;
	//Curerent library copy;
	TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement libraryCopy;

  private SqlParser my_parser;

  /** Constructor */
  public CUP_SqlParser_actions(SqlParser t_parser) {
    this.my_parser = t_parser;
  }

  /** Method with the actual generated action code. */
  public   TUVienna.CS_CUP.Runtime.Symbol CUP_SqlParser_do_action(
    int                        CUP_SqlParser_act_num,
    TUVienna.CS_CUP.Runtime.lr_parser CUP_SqlParser_parser,
    System.Collections.Stack            xstack1,
    int                        CUP_SqlParser_top)
    {
      /* Symbol object for return from actions */
      mStack CUP_SqlParser_stack =new mStack(xstack1);
      TUVienna.CS_CUP.Runtime.Symbol CUP_SqlParser_result;

      /* select the action based on the action number */
      switch (CUP_SqlParser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // use_stmt ::= SQL_KW_USE ident_or_default 
            {
              object RESULT = null;
		SqlToken db = (SqlToken)((TUVienna.CS_CUP.Runtime.Symbol) CUP_SqlParser_stack.elementAt(CUP_SqlParser_top-0)).value;
		 
              CUP_SqlParser_result = new TUVienna.CS_CUP.Runtime.Symbol(2/*use_stmt*/, RESULT);
            }
          return CUP_SqlParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ident_or_default ::= SQL_KW_DEFAULT 
            {
              SqlToken RESULT = null;
		object name = (object)((TUVienna.CS_CUP.Runtime.Symbol) CUP_SqlParser_stack.elementAt(CUP_SqlParser_top-0)).value;
		 RESULT = (SqlToken)name; 
              CUP_SqlParser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*ident_or_default*/, RESULT);
            }
          return CUP_SqlParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ident_or_default ::= SQL_OP_IDENT 
            {
              SqlToken RESULT = null;
		SqlToken name = (SqlToken)((TUVienna.CS_CUP.Runtime.Symbol) CUP_SqlParser_stack.elementAt(CUP_SqlParser_top-0)).value;
		 RESULT = (SqlToken)name; 
              CUP_SqlParser_result = new TUVienna.CS_CUP.Runtime.Symbol(1/*ident_or_default*/, RESULT);
            }
          return CUP_SqlParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= use_stmt EOF 
            {
              object RESULT = null;
		object start_val = (object)((TUVienna.CS_CUP.Runtime.Symbol) CUP_SqlParser_stack.elementAt(CUP_SqlParser_top-1)).value;
		RESULT = start_val;
              CUP_SqlParser_result = new TUVienna.CS_CUP.Runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP_SqlParser_parser.done_parsing();
          return CUP_SqlParser_result;

          /* . . . . . .*/
          default:
            throw new System.Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
